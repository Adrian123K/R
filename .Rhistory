sales2 = matrix(c(1,'Apple',500,10,
2,'Peach',200,4,
3,'Banana',100,6,
4,'Grape',50,8), nrow=4,byrow=T)
sales2
df1=data.frame(sales2);df1
names(df1)=c('NO','NAME','PRICE','QTY');df1
sales
sales$NAME
sales[1,3]
sales[1,]
sales[,3]
sales[c(1,2),]
sales[,c(1,2)]
sales[,c(1:3)]
# 조건문 작성하여 추출
subset(sales,qty<5)
subset(sales,price==200)
subset(sales,name=='Apple')
sales2
df1
subset(df1,QTY<5) # factor로 되어있기때문에 숫자로 변환해야함
class(df1)
str(df1)
df1$QTY=as.numeric(df1$QTY)
df1
subset(df1, QTY<5) # 정상적으로 출력된 것 아님
df1$QTY=as.numeric(as.character(df1$QTY)) # numeric으로 바꾸기 전에 character로 먼저 변환 후 실행
df1
subset(df1, QTY<5)
str(sales2)
str(sales)
subset(df1, QTY<5) # 정상적으로 출력된 것 아님
installed.packages(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
head(diamonds)
subset(diamons, cut=='premium')
subset(diamonds, cut=='premium')
subset(diamonds, cut=='Premium')
str(diamonds)
df1$QTY=as.numeric(df1$QTY)
df1
str(df1)
dfr1
df1
sales2 = matrix(c(1,'Apple',500,10,
2,'Peach',200,4,
3,'Banana',100,6,
4,'Grape',50,8), nrow=4,byrow=T)
sales2
df1=data.frame(sales2);df1
sales2
df1
subset(df1,QTY<5) # factor로 되어있기때문에 숫자로 변환해야함
class(df1)
str(df1)
df1$QTY=as.numeric(df1$QTY)
sales$NAME
df1=data.frame(sales2);df1
names(df1)=c('NO','NAME','PRICE','QTY');df1
df1$QTY=as.numeric(df1$QTY)
df1
str(df1)
df1=data.frame(sales2);df1
df1$QTY=as.numeric(df1$QTY)
names(df1)=c('NO','NAME','PRICE','QTY');df1
df1$QTY=as.numeric(df1$QTY)
df1
df1=data.frame(sales2);df1
names(df1)=c('NO','NAME','PRICE','QTY');df1
df1$QTY=as.numeric(as.character(df1$QTY)) # numeric으로 바꾸기 전에 character로 먼저 변환 후 실행
df1
subset(df1, QTY<5)
str(sales2)
str(sales)
no<-c(1,2,3)
name<-c('apple','banana','peach')
price<-c(100,200,300)
df2=data.frame(NO=no,NAME=name,PRICE=price);df2
str(df2)
no<-c(10,20,30)
name<-c('train','car','plain')
price<-c(60000,40000,100000)
df3=data.frame(NO=no,NAME=name,PRICE=price);df3
df4=cbind(df2,df3);df4
df5=rbind(df2,df3);df5
dff=data.frame(NO=no,ireum=name,Gagyuk=price)
df6=rbind(df2,dff);df6 # column명이 다를 경우 진행안됨
df2=data.frame(name=c('apple','banana','cherry'),
price=c(499,599,299))
df3=data.frame(name=c('apple','banana','berry'),
qty=c(10,40,90))
df2;df3
df7=merge(df2,df3,all=T);df7 # 유실데이터가 발생하므로 all 옵션 사용
new=data.frame(name='mango',price=199) # 내용추가
df2=rbind(df2,new);df2
df2=rbind(df2,data.frame(name='strawberry',price=299));df2
# Ex: df2에 qty=c(10,20,30,40,50)의 값을 갖는 column 추가
df8=cbind(df2,qty=c(10,20,30,40,50));df8
no=c(1,2,3,4,5)
name=c("서","주","최","이","윤")
addr=c("서울","대전","대구","부산","광주")
tel=c(1111,2222,3333,4444,5555)
hobby=c("독서","미술","놀기","자기","먹기")
member=data.frame(NO=no,NAME=name,ADDR=addr,TEL=tel,HOBBY=hobby);member
# 쿼리문처럼 선택하여 불러오는 방법
mem2=subset(member, select=c(NO,NAME,HOBBY));mem2
mem3=subset(member, select=-TEL);mem3
colnames(mem3)=c("번호","이름","주소","취미");mem3
member
ncol(member)
nrow(member)
names(member) # column명
rownames(member)
colnames(member) # column명
row.names(member)
member[c(5,3,1,4,2),] # row순서 바꿔서 가져오기
v1 = seq(1,10,2);v1
NROW(v1)
v7 = c(1,3,5,7,9);v7
3 %in% v7
# Ex1
date4 = seq(as.Date("2015-01-01"),as.Date("2015-01-31"),1);date4
# Ex2
vec1 <- c('사과','배','감','버섯','고구마');vec1
vec1[-3]
# Ex3
vec1 <- c('봄','여름','가을','겨울')
vec2 <- c('봄','여름','늦여름','초가을')
union(vec1,vec2)
intersect(vec1,vec2)
setdiff(vec1,vec2)
# 대,소문자 변경
v3 = c('a','b','c','d','e','f');v3
v3[c(3,5)]=c('C','E');v3
v3[c(1,2)]=toupper(v3[c(1,2)]);v3
v3[c(2,5)]=tolower(v3[c(2,5)]);v3
# 백업 데이터 생활화!
v4=v3[-4];v4
# vector -> factor형 변환
v5=as.factor(v3);v5
v6=seq(as.Date("2020/01/01","%Y/%m/%d"),as.Date("2020/12/31","%Y/%m/%d"),1);v6;class(v6)
# v6에서 연도를 제외한 월/일 형태로 변환
v7=as.character(v6,"%m/%d");v7;class(v7)
# v6에서 2020년 2월 28일 뒤에 2월 29일 삽입
as.character(as.Date("2020-02-28"),'%j')
v6=seq(as.Date("2020/01/01","%Y/%m/%d"),as.Date("2020/12/31","%Y/%m/%d"),1)
v6
class(v6)
v8=append(as.character(v6),"2020-02-29", as.numeric(as.character(as.Date("2020-02-28"),'%j')))
v8
v6
# v6에서 2020년 2월 29일 뒤에 2월 30일 삽입
as.character(as.Date("2020-02-28"),'%j')
v8=append(as.character(v6),"2020-02-30", as.numeric(as.character(as.Date("2020-02-29"),'%j')))
# v6에서 2020년 2월 29일 뒤에 2월 30일 삽입
as.character(as.Date("2020-02-29"),'%j')
v8=append(as.character(v6),"2020-02-30", as.numeric(as.character(as.Date("2020-02-29"),'%j')))
v8
# 자료 추출
v6
names(v6)=1:length(v6)
v6[v6=="2020-02-28"]
names(v6[v6=="2020-02-28"])
library(tidyverse)
library(gridExtra)
library(MASS)
library(glmnet)
library(randomForest)
library(gbm)
library(rpart)
library(boot)
library(data.table)
library(ROCR)
library(ggplot2)
library(dplyr)
library(gridExtra)
install.packages("tidyverse")
install.packages("tidyverse")
library(tibble)
install.packages("gbm")
install.packages("ROCR")
library(tidyverse)
detach("package:tibble", unload = TRUE)
install.packages("tibble")
install.packages("tibble")
setwd("D:/R")
getwd(0)
getwd()
getwd()
emp
emp
emp
emp
emp=read.csv('emp3.csv',header=T)
emp
library(doBy)
library(data.table)
orderBy(~-보너스,data.frame(emp$ename,emp$job,보너스=ifelse(emp$job=='SALESMAN',4000,ifelse(emp$job=='ANALYST',6000),0)))
orderBy(~-보너스,data.frame(emp$ename,emp$job,보너스=ifelse(emp$job=='SALESMAN',4000,ifelse(emp$job=='ANALYST',6000,0))))
orderBy(~-보너스,data.frame(이름=emp$ename,직업=emp$job,보너스=ifelse(emp$job=='SALESMAN',4000,ifelse(emp$job=='ANALYST',6000,0))))
orderBy(~-보너스,data.frame(이름=emp$ename,직업=emp$job,보너스=ifelse(emp$job=='SALESMAN',4000,ifelse(emp$job=='ANALYST',6000,0))))
max(emp$sal)
data.frame(이름=emp$ename,커미션=ifelse(is.na(emp$comm,'no comm',emp$comm)))
aggregate(sal~job, emp, max)
str(aggregate(sal~job, emp, max))
aggregate(sal~job, emp, max)
aggregate(sal~deptno,emp,sum)
rs
rs=aggregate(sal~deptno, emp, sum)
names(rs)=c('부서번호','토탈월급')
rs
orderBy(~-토탈월급,rs)
aggregate(empno~job,emp,length)
rs2
rs2=aggregate(empno~job,emp,length)
names(rs2)=c('직업','인원수')
rs2
rs3=aggregate(sal~deptno+job,emp,sum)
orderBy(~부서번호-토탈월급,rs3)
rs3=aggregate(sal~deptno+job,emp,sum)
names(rs3)=c('부서번호','직업','토탈월급')
orderBy(~부서번호-토탈월급,rs3)
rs4
rs4=aggregate(sal~format(as.Date(emp$hiredate),'%Y'),emp,mean)
names(rs4)=c('입사년도','평균월급')
rs4
attach(emp)
tapply(sal,job,mean)
rs5=tapply(sal,job,mean)
rs5
rs5$sal
trunc(tapply(sal,job,mean))
x=trunc(tapply(sal,job,mean))
barplot(x,main='연도별 평균월급',col=rainbow(4))
barplot(x,main='연도별 평균월급',col=rainbow(5))
barplot(x,main='연도별 평균월급',col=rainbow(4))
barplot(x,main='연도별 평균월급',col=rainbow(5))
barplot(x,main='연도별 평균월급',col=rainbow(5),density(50))
barplot(x,main='연도별 평균월급',col=rainbow(5),density=50)
barplot(x,main='연도별 평균월급',col=rainbow(5),density=80)
attach(emp)
tapply(sal,list(job,deptno),sum)
rs5=tapply(sal,list(job,deptno),sum)
rs5[is.na(rs5)]=0
rs5
barplot(rs5,col=rainbow(5))
barplot(rs5,col=rainbow(5),legend=rownames)
barplot(rs5,col=rainbow(5),legend=rownames(rs5))
barplot(rs5,col=rainbow(5),legend=rownames(rs5),beside=T)
x=tapply(emp$sal,emp$job,sum)
pie(x,col=rainbow(5),density=80)
library(plotrix)
pie3D(x,labels = rownames(x),explode = 0.1)
pie3D(x,labels = rownames(x),explode = 0.5)
pie3D(x,labels = rownames(x),explode = 0.2)
x2=aggregate(sal~job,emp,sum)
pct=round(x2$sal/sum(x2$sal)*100,1)
job_label=paste(x2$job,':',pct,'%')
job_label
pie3D(x,labels=job_label,explode=0.2)
pie3D(x,labels=job_label,explode=0.2,labelcex = 0.7)
pie3D(x,labels=job_label,explode=0.2,labelcex = 0.9)
pie3D(x,labels=job_label,explode=0.2,labelcex = 1)
pie3D(x,labels=job_label,explode=0.2,labelcex = 1,labelpos = )
pie3D(x,labels=job_label,explode=0.2,labelcex = 1,labelpos = 1)
pie3D(x,labels=job_label,explode=0.2,labelcex = 1,labelpos = T)
pie3D(x,labels=job_label,explode=0.2,labelcex = 1)
#69
x=tapply(emp$empno,emp$deptno,length)
x3=aggregate(empno~deptno,emp,length)
pct=round(x3$empno/sum(x3$empno)*100,1)
dept_label=paste(x3$deptno,'번:',pct,'%')
pie3D(x,col=rainbow(3),explode=0.1,labels=dept_label,labelcex = 1.5)
v1=c(2,2,2)
plot(v1)
x=1:3
y=3:1
plot(x,y, xlim=c(1,10), ylim=c(1,5), xlab="x축", ylab="y축", main="TEST",sub="200307")
plot.new()
dev.new()
p1=c(10,20,30,40,50)
day=round(p1/sum(p1)*100,1)
label=paste(day,"%", "\n",)
pie3D(p1, main="PIE 3D", radius=0.8, col=rainbow(length(p1)), cex=0.5,labels=label, explode=0.05 )# explode: 파이 분할 간격
legend(0.4,1.2,c('MON','TUE','WED','THU','FRI'), cex=1, fill=rainbow(length(p1)))
pie3D(p1, main="PIE 3D", radius=0.8, col=rainbow(length(p1)), cex=0.6,labels=label, explode=0.05 )# explode: 파이 분할 간격
legend(0.4,1.2,c('MON','TUE','WED','THU','FRI'), cex=1, fill=rainbow(length(p1)))
library(igraph)
g1=graph(c(1,2, 2,3, 2,4, 1,4, 5,6, 3,6, 5,5), directed = T)
plot(g1)
print_all(g1)
data.frame(x$ename.x, x$ename.y)
#75
x=merge(emp,emp,by.x='mgr',by.y='empno')
data.frame(x$ename.x, x$ename.y)
g1=graph(c(1,2, 2,3, 2,4, 1,4, 5,6, 3,6, 5,5), directed = T)
plot(g1)
print_all(g1)
#77
a=x[,c('ename.x','ename.y')]
b=graph.data.frame(a,direct=T)
dev.new()
plot(b)
plot(b, layout=layout.fruchterman.reingold, vertex.size=8, edge.arrow.size=0.5)
library(googleVis)
a <- merge(emp,emp, by.x="empno",by.y="mgr", all.y=T)
org <- gvisOrgChart(a, idvar="ename.y",parentvar="ename.x", options=list(width=600, height=250, size='middle',allowCollapse=T))
plot(org)
plot(org)
getwd()
emp
attach(emp)
aggregate(sal~job, emp, sum)
tapply(sal, job, sum)
aggregate(sal~job, emp, sum, na.action = na.pass)
#79
x=merge(emp,dept,by='deptno',all=T)
attach(x)
tapply(sal, loc, sum)
#79
dept=read.csv('dept.csv',header=T)
x=merge(emp,dept,by='deptno',all=T)
attach(x)
tapply(sal, loc, sum)
aggregate(sal~loc, x, sum, na.action = na.pass
aggregate(sal~loc, x, sum, na.action = na.pass)
aggregate(sal~loc, x, sum, na.action = na.pass)
attach(x)
tapply(sal, loc, sum)
aggregate(sal~loc, x, mean, na.action = na.pass)
aggregate(sal~loc, x, round(mean), na.action = na.pass)
aggregate(sal~loc, x, mean, na.action = na.pass)
aggregate(sal~loc, x, mean, na.action = na.pass)
round(aggregate(sal~loc, x, mean, na.action = na.pass))
attach(x)
round(tapply(sal, loc, mean))
x2
x2=aggregate(sal~dname, x, mean, na.action = na.pass)
x2$sal=round(x2$sal)
x2
barplot(x3, ylim=c(0,3000),col=rainbow(4))
#81
x3=tapply(x$sal,x$dname,mean)
barplot(x3, ylim=c(0,3000),col=rainbow(4))
#82
library(googleVis)
x2
plot(x4)
x2
x3=data.frame(x2)
x4=gvisBarChart(x3)
plot(x4)
#83
year(x$hiredate)
#83
library(lub)
#83
library(lubridate)
year(x$hiredate)
str(x2)
attach(x)
tapply(sal,list(loc,year(hiredate)),sum)
#84
rs=tapply(sal,list(loc,year(hiredate)),sum)
rs[is.na(rs)]=0
rs
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T)
#85
barplot(rs, col=rainbow(4), legend=rownames(rs))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T)
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(-0.25,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(-1,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(-0.5,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(-0.5,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(0.5,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(1,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(0.05,0)))
#85
barplot(rs, col=rainbow(4), legend=rownames(rs),beside=T,args.legend=list(x='topright',bty='n',inset=c(-0.01,0)))
#87
line=read.csv('1-4호선승하차승객수.csv',header=T)
t1 <- gvisMotionChart(line, idvar="line_no", timevar="time")
plot(t1)
install.packages(c("googleVis", "lubridate"))
#87
library(googleVis)
line=read.csv('1-4호선승하차승객수.csv',header=T)
t1 <- gvisMotionChart(line, idvar="line_no", timevar="time")
plot(t1)
#88
line2=read.csv('서울지하철_5-8호선_이용현황_시간대별.csv',header=T)
t2 = gvisMotionChart(line2, idvar="호선명", timevar="시간")
plot(t2)
emp
rbind(
emp[ emp$deptno %in% c(10,20), c("ename","sal","deptno") ],
emp[ emp$deptno ==10, c("ename","sal","deptno") ]
)
x=rbind(aggregate(sal~deptno,emp,sum),c('total',sum(emp$sal)))
names(x)=c('부서번호','토탈월급')
x
library(doBy)
install.packages("doBy")
library(doBy)
library(dplyr)
#91
rs=rbind(aggregate(sal~job,emp,sum),c("토탈값:",sum(emp$sal)))
names(rs)=c('직업','토탈값')
rs
#91
rs=rbind(aggregate(sal~job,emp,sum),c("",sum(emp$sal)))
names(rs)=c('직업','토탈값')
rs
#91
rs=rbind(aggregate(sal~job,emp,sum),c('',sum(emp$sal)))
names(rs)=c('직업','토탈값')
rs
str(emp)
library(doBy)
x2=setdiff(
emp[emp$deptno %in% c(10,20),c('ename','sal','deptno')],
emp[emp$deptno==10,c('ename','sal','deptno')])
orderBy(~ename,x2)
str(emp)
str(emp)
length(emp$job)
unique(length(emp$job))
emp$job
data.frame(emp$job))
data.frame(emp$job)
data.frame(unique(emp$job))
names(rs)=c('직업','토탈값')
#91
rs=rbind(aggregate(sal~job,emp,sum),c('',sum(emp$sal)))
emp
aggregate(sal~job, emp, sum)
rbind(aggregate(sal~job, emp, sum),c('',emp$sal))
emp
rbind(aggregate(sal~job, emp, sum),c('',emp$sal))
rbind(aggregate(sal~job, emp, sum),c('',sum(emp$sal)))
rbind(aggregate(sal~job, emp, sum),c("",sum(emp$sal)))
rbind(aggregate(sal~job, emp, sum),c(" ",sum(emp$sal)))
emp
str(emp)
emp$job=as.character(emp$job)
str(emp)
rbind(aggregate(sal~job, emp, sum),c(" ",sum(emp$sal)))
emp<-read.csv('emp3.csv',stringsAsFactors = F,header=T)
str(emp)
str(emp)
#91
rs=rbind(aggregate(sal~job,emp,sum),c('',sum(emp$sal)))
names(rs)=c('직업','토탈값')
rs
univ<-read.csv('전국_대학별등록금통계_현황.csv', stringsAsFactors=F,header=T)
univ
max(univ$등록금.A.B.)
head(univ)
emp[emp$mgr==emp$empno,'ename']
emp[emp$empno==emp$mgr,'ename']
emp
emp[emp$empno %in% emp$mgr,'ename']
data.frame(사원명=emp[emp$empno %in% emp$mgr,'ename'])
#97
cday=read.csv('crime_day.csv',header=T)
cday
max(cday$CNT)
cday[cday$cnt==mcnt,]
mcnt=max(cday$CNT)
cday[cday$cnt==mcnt,]
#97
cday=read.csv('crime_day.csv',header=T)
mcnt=max(cday$CNT)
cday[cday$cnt==mcnt,]
cday[cday$cnt==max(cday$cnt),]
cday<-cday[trimws(cday$C_C)=='강력범죄',]
cday[cday$CNT==max(cday$CNT),]
x=data.frame(이름=emp$ename, 월급=emp$sal, 순위=rank(-emp$sal, ties.method = 'min', ))
x
orderBy(~순위,x)
x2
x2=data.frame(이름=emp$ename, 월급=emp$sal, 순위=dense_rank(-emp$sal))
x2
orderBy(~순위,x2)
rs=(data.frame(이름=emp$ename, 월급=emp$sal,직업=emp$job, 순위=dense_rank(-emp$sal)))
rs=orderBy(~순위,rs)
rs[rs$직업=='SALESMAN',]
install.packages(c("data.table", "plotrix"))
install.packages("data.table")
cancer
#100
cancer=read.csv('cancer2.csv',header=T)
cancer
cancer[cancer$성별=='여자',]
cancer[cancer$성별=='여자'&cancer$암종!='모든암',]
cdf=cancer[cancer$성별=='여자' & cancer$암종!='모든암',]
cdf
cdf
cdf=unique(cdf[!is.na(cdf$환자수),])
cdf
