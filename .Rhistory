main=input$region,
col = c("Sky Blue","Hot pink"),
beside=T,
density=80,
names.arg= create_cnt$년도,
ylab="건수",
xlab="연도",
args.legend=list(x='topright', bty='n',inset=c(0,-0.1)),
legend=c('창업','폐업'))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
# Render a barplot
barplot( rbind( create_cnt[,input$region],
drop_cnt[,input$region] ),
main=input$region,
col = c("Sky Blue","Hot pink"),
beside=T,
density=80,
names.arg= create_cnt$년도,
ylab="건수",
xlab="연도",
args.legend=list(x='topright', bty='n',inset=c(0,-0.2)),
legend=c('창업','폐업'))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
install.packages(c("readxl", "wordcloud"))
# pie() : 파이형 그래프. 전체합이 100이 되어야하는 경우 서로를 비교할 때 사용
p1=c(10,22,35,40)
pct=round(p1/sum(p1)*100,1)
lab=paste(pct,' %')
pie(p1, radius=0.5, init.angle = 90, col=rainbow(length(p1)), label=lab) # angle은 시작위치, 반시계방향
legend(0.4,1.1,c('week1','week2','week3','week4'),cex=0.5,fill=rainbow(length(p1)))
lab1=c('week1','week2','week3','week4')
lab2=paste(lab1," \n", pct, " %")
pie(p1, radius=0.7, init.angle = 90, col=rainbow(length(p1)),label=lab2)
legend(0.4,1.1,c('week1','week2','week3','week4'),cex=0.5,fill=rainbow(length(p1)))
########################################121
create_cnt=read.csv('창업건수.csv',head=T)
x=create_cnt[create_cnt$년도=='2014',][-1]
lab=colnames(x)
x2
########################################121
create_cnt=read.csv('창업건수.csv',head=T)
x=create_cnt[create_cnt$년도=='2014',][-1]
lab=colnames(x)
x2=t(x)
x2
lab
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("년도별 업종별 창업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "년도:",
choices=drop_cnt$년도 ) ,
helpText("년도별 창업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
x2 <-  drop_cnt[ drop_cnt$년도==input$region, -1  ]
cnt_labels <- round( x2/sum(x2) * 100, 1)
cnt_labels2 <-  paste( colnames(cnt_labels) ,cnt_labels ,'%')
pie(  t(x2)  , col=rainbow(7), labels=cnt_labels2)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("연도별 업종별 창/폐업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "업종:",
choices=create_cnt$년도),
hr(),
helpText("업종별 창업과 폐업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
x=create_cnt[create_cnt$년도==input$region,-1]
pct=roudn(x/sum(x)*100,1)
lab=paste(colnames(x),pct,'%')
pie(t(x), main='연도별 업종 창업 비율', col=rainbow(7),labels=lab)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
x=create_cnt[create_cnt$년도==input$region,-1]
pct=round(x/sum(x)*100,1)
lab=paste(colnames(x),pct,'%')
pie(t(x), main='연도별 업종 창업 비율', col=rainbow(7),labels=lab)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(ggplot2)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("년도별 업종별 창업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "년도:",
choices=create_cnt$년도 ) ,
helpText("년도별 창업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
a=create_cnt[create_cnt$년도==input$region,-1]
a=data.table(colnames(a),t(a))
colnames(a)=c('가게','건수')
per=round(a$건수/sum(a$건수)*100,1)
ggplot(a, aes(x = "", y = 건수, fill=가게))+
geom_bar(width = 1, stat = "identity",color='white')+
coord_polar("y")+
geom_text(aes(label = paste0(per,"%")),
position = position_stack(vjust = 0.5))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(datasets)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("년도별 업종별 창업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "년도:",
choices=create_cnt$년도 ) ,
helpText("년도별 창업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
a=create_cnt[create_cnt$년도==input$region,-1]
a=data.table(colnames(a),t(a))
colnames(a)=c('가게','건수')
per=round(a$건수/sum(a$건수)*100,1)
ggplot(a, aes(x = "", y = 건수, fill=가게))+
geom_bar(width = 1, stat = "identity",color='white')+
coord_polar("y")+
geom_text(aes(label = paste0(per,"%")),
position = position_stack(vjust = 0.5))
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(data.table)
# Run the app ----
shinyApp(ui = ui, server = server)
######################### 128
cars=c(1,3,6,4,9)
trucks=c(2,5,4,5,12)
plot(cars,type='o',col='blue',ylim=c(0,12))
lines(trucks, type='o',col='red',ylim=c(0,12))
dev.new()
plot(cars,type='o',col='blue',ylim=c(0,12))
lines(trucks, type='o',col='red',ylim=c(0,12))
lines(trucks, type='o',col='red',lty=2,ylim=c(0,12))
######################################## 128
cars=c(1,3,6,4,9)
trucks=c(2,5,4,5,12)
plot(cars,type='o',col='blue',ylim=c(0,12),pch=21, lty=1)
lines(trucks, type='o',col='red',ylim=c(0,12),pct=22,lty=2)
lines(trucks, type='o',col='red',ylim=c(0,12),pch=22,lty=2)
######################################## 129
cars=c(1,3,6,4,9)
trucks=c(2,5,4,5,12)
plot(cars,type='o',col='blue',ylim=c(0,12),pch=21, lty=1,axes=F,ann=F)
lines(trucks, type='o',col='red',ylim=c(0,12),pch=22,lty=2)
# 새로운 축 추가
axis(1, at=1:5, lab=c('월','화','수','목','금')) # axis(1:x축, at= : 범위, lab= : 축 라벨)
axis(2) # axis(2) : y축
box()
g_range<-range(0,create_cnt$치킨집, drop_cnt$치킨집)
g_range
range(0,5,4)
range(0,7,10)
g_range[2]
legend(8,g_range[2],c('창업','폐업'), cex=0.7, col=c('blue','red'),pch=22, lty=1:2)
plot(cars,type='o',col='blue',ylim=c(0,12),pch=21, lty=1,axes=F,ann=F)
lines(trucks, type='o',col='red',ylim=c(0,12),pch=22,lty=2)
box()
g_range<-range(0,create_cnt$치킨집, drop_cnt$치킨집) # 0에서 부터 둘 중 큰 값까지
legend(8,g_range[2],c('창업','폐업'), cex=0.7, col=c('blue','red'),pch=22, lty=1:2)
# 새로운 축 추가
axis(1, at=1:5, lab=c('월','화','수','목','금')) # axis(1:x축, at= : 범위, lab= : 축 라벨)
axis(2) # axis(2) : y축
######################################## 130
create_cnt <- read.csv("창업건수.csv", header=T)
drop_cnt <- read.csv("폐업건수.csv", header=T)
g <- create_cnt$치킨집
m <- drop_cnt$치킨집
g_range <- range(0, g, m)
plot(g, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=create_cnt$년도)
axis(2)
box()
lines(m, type="o", pch=22, lty=2, col="red")
title(main="치킨집 창업/폐업현황", col.main="red")
title(xlab="year" )
title(ylab="Total" )
legend( 8, g_range[2], c("창업","폐업"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("연도별 업종별 창/폐업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "업종:",
choices=colnames(create_cnt)[-1]),
hr(),
helpText("업종별 창업과 폐업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
g <- create_cnt$치킨집
m <- drop_cnt$치킨집
g_range <- range(0, g, m)
plot(g, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=create_cnt$년도)
axis(2)
box()
lines(m, type="o", pch=22, lty=2, col="red")
title(main="치킨집 창업/폐업현황", col.main="red")
title(xlab="year" )
title(ylab="Total" )
legend( 8, g_range[2], c("창업","폐업"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("연도별 업종별 창/폐업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "업종:",
choices=create_cnt$년도),
hr(),
helpText("업종별 창업과 폐업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
g <- create_cnt[,input$region]
m <- drop_cnt[,input$region]
g_range <- range(0, g, m)
plot(g, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=create_cnt$년도)
axis(2)
box()
lines(m, type="o", pch=22, lty=2, col="red")
title(main="업종별 창업/폐업현황", col.main="red")
title(xlab="year" )
title(ylab="Total" )
legend( 8, g_range[2], c("창업","폐업"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
create_cnt <- read.csv("창업건수.csv", header=T)
drop_cnt <- read.csv("폐업건수.csv", header=T)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("연도별 업종별 창/폐업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "업종:",
choices=create_cnt$년도),
hr(),
helpText("업종별 창업과 폐업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
g <- create_cnt[,input$region]
m <- drop_cnt[,input$region]
g_range <- range(0, g, m)
plot(g, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=create_cnt$년도)
axis(2)
box()
lines(m, type="o", pch=22, lty=2, col="red")
title(main="업종별 창업/폐업현황", col.main="red")
title(xlab="year" )
title(ylab="Total" )
legend( 8, g_range[2], c("창업","폐업"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("연도별 업종별 창/폐업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "업종:",
choices=create_cnt$년도),
hr(),
helpText("업종별 창업과 폐업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
g <- create_cnt[,input$region]
m <- drop_cnt[,input$region]
g_range <- range(0, g, m)
plot(g, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=create_cnt$년도)
axis(2)
box()
lines(m, type="o", pch=22, lty=2, col="red")
title(main="업종별 창업/폐업현황", col.main="red")
title(xlab="year" )
title(ylab="Total" )
legend( 8, g_range[2], c("창업","폐업"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
# Give the page a title
titlePanel("연도별 업종별 창/폐업현황"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("region", "업종:",
choices=colnames(create_cnt)[-1]),
hr(),
helpText("업종별 창업과 폐업 현황 보고서")
),
# Create a spot for the barplot
mainPanel(
plotOutput("typePlot")
)
)
)
# Define server logic ----
server <-function(input, output) {
# Fill in the spot we created for a plot
output$typePlot <- renderPlot({
g <- create_cnt[,input$region]
m <- drop_cnt[,input$region]
g_range <- range(0, g, m)
plot(g, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:10, lab=create_cnt$년도)
axis(2)
box()
lines(m, type="o", pch=22, lty=2, col="red")
title(main="업종별 창업/폐업현황", col.main="red")
title(xlab="year" )
title(ylab="Total" )
legend( 8, g_range[2], c("창업","폐업"), cex=0.8, col=c("blue","red"), pch=21:22, lty=1:2)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
getwd()
x1=c(7,8,9,9,10,10,11,11,12,13)
x2=c(7,9,9,10,10,10,10,11,11,13)
x3=c(3,3,6,7,7,10,10,10,10,11,13,30)
mean(x1)
mean(x2)
mean(x3)
x3=c(6,6,7,7,10,10,10,10,11,13,30)
mean(x3)
mean(x1)
mean(x2)
mean(x3)
sum(x3)
sum(x3)
x3=c(6,7,7,10,10,10,10,11,13,30)
sum(x3)
x3=c(7,7,10,10,10,10,11,13,30)
sum(x3)
x3=c(1,2,5,10,10,10,10,11,13,30)
sum(x3)
x3=c(1,1,7,7,10,10,10,10,11,13,30)
sum(x3)
mean(x3)
median(x1)
median(x2)
median(x3)
names(table(x1))
data.frame(names(table(x1)),count(x1))
names(table(x1))[table(x1) == max(table(x1))]
range(x1)
range(x3)
rs=boxplot(x3)
rs
rs$stats
sd(x1)
sd(x2)
sd(x3)
quantile(car$price)
car=read.csv('usedcars.csv',head=T,stringsAsFactors=F)
str(car)
quantile(car$price)
boxplot(car$price, horizontal = T)
install.packages("sqldf")
IQR(car$price)
nrow(car)
car$mileage
sort(car$m)
sort(car$mileage)
hist(sort(car$mileage),col='green')
hist(sort(car$mileage),col='green',xlim=c(0,200000))
hist(sort(car$mileage),col='green')
hist(sort(car$mileage),col='green')
