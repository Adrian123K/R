cnt <- cnt + 1
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)[i]
cnt <- 1
if(tfk[i]!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk[i]*r*input[i,j]
}
cat('\n row:',i, w)
cnt <- 1
}else{
cnt <- cnt + 1
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)[i]
cnt <- 1
if(tfk[i]!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk[i]*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)[i]
cnt <- 1
if(tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk[i]*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
cnt <- 1
if(tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk[i]*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
cnt <- 1
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
cnt <- 1
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
inputs1 <- matrix(c(0,0,1,0,0,1,1,1),nrow=4)
targets1 <- matrix(c(0,0,0,1),nrow=4)
input <- cbind(c(1,1,1,1),inputs1)
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
cnt <- 1
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
cnt <- 0
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt!=4){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt!=4){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
print(w)
}else{
cnt <- cnt + 1
}
}
}
print(w)
}
and_pcn(input,target,r)
inputs1 <- matrix(c(0,0,1,0,0,1,1,1),nrow=4, byrow=T)
targets1 <- matrix(c(0,0,0,1),nrow=4)
input <- cbind(c(1,1,1,1),inputs1)
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt!=4){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
print(w)
}else{
cnt <- cnt + 1
}
}
}
print(w)
}
and_pcn(input,target,r)
obs <- c(19, 41, 40)
null.probs <- c(2/10, 3/10, 5/10)
chisq.test(obs, p=null.probs)
states <- as.data.frame(state.x77[,c("Murder", "Population",
"Illiteracy", "Income", "Frost")])
fit=lm(Murder~Population+Illiteracy+Income+Frost,data=states)
summary(fit)
confint(fit)
inputs1 <- matrix(c(0,1,0,1,0,0,1,1),nrow=4)
targets1 <- matrix(c(0,0,0,1),nrow=4)
input <- cbind(c(1,1,1,1),inputs1)
r <- 0.05
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
cnt <- 1
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
input
inputs1 <- matrix(c(0,0,1,0,0,1,1,1),nrow=4, byrow=T)
targets1 <- matrix(c(0,0,0,1),nrow=4)
input <- cbind(c(1,1,1,1),inputs1)
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt!=4){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
print(w)
}else{
cnt <- cnt + 1
}
}
}
print(w)
}
and_pcn(input,target,r)
inputs1 <- matrix(c(0,0,1,0,0,1,1,1),nrow=4, byrow=T)
targets1 <- matrix(c(0,0,0,1),nrow=4)
input <- cbind(c(1,1,1,1),inputs1)
r <- 0.03
and_pcn <- function(input,taget,r){
w <- matrix(c(0.3,0.4,0.1),nrow=3)
step <- function(x){
ifelse(x>=0,1,0)
}
while(cnt!=4){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
print(w)
}else{
cnt <- cnt + 1
}
}
}
print(w)
}
and_pcn(input,target,r)
and_pcn(input,target,r)
and_pcn <- function(input,taget,r){
w <- matrix(c(0,0,0),nrow=3)
for (i in 1:3){
w[i] <- runif(1)
}
step <- function(x){
ifelse(x>=0,1,0)
}
cnt <- 1
while(cnt<5){
for (i in 1:nrow(input)){
k <- input[i,] %*% w
tfk <- target[i]-step(k)
if (tfk!=0){
for (j in 1:ncol(input)){
w[j] <- w[j]+tfk*r*input[i,j]
}
cnt <- 1
}else{
cnt <- cnt + 1
cat('\n row:',i, w)
}
}
}
print(w)
}
and_pcn(input,target,r)
fit <- lm(weight~height,data=women)
fit
plot(weight~height,data=women)
abline(fit,col="red")
title(expression(italic(weight==3.45%*%height-87.52)))
dev.new()
plot(weight~height,data=women)
abline(fit,col="red")
title(expression(italic(weight==3.45%*%height-87.52)))
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
plot(weight~height,data=women)
abline(fit,col="red")
title(expression(italic(weight==3.45%*%height-87.52)))
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
concrete <- read.csv("concrete.csv")
str(concrete)
# 3. 정규화 함수로 데이터를 정규화 작업
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x) ) )
}
concrete_norm <- as.data.frame(lapply(concrete,normalize) )
summary( concrete_norm$strength)
# 본래 데이터의 최소값, 최대값과 비교
summary( concrete$strength)
hist(concrete$strength)
# 3. 정규화 함수로 데이터를 정규화 작업
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x) ) )
}
concrete_norm <- as.data.frame(lapply(concrete,normalize) )
summary( concrete_norm$strength)
# 본래 데이터의 최소값, 최대값과 비교
summary( concrete$strength)
concrete_train <- concrete_norm[1:773, ]
concrete_test  <- concrete_norm[774:1030, ]
install.packages("neuralnet")
library(neuralnet)
concrete_model <- neuralnet(formula=strength ~ cement + slag + ash  +water +superplastic + coarseagg  + fineagg  + age,
data =concrete_train)
plot(concrete_model )
model_results <-  compute(concrete_model, concrete_test[1:8])
head(model_results)
predicted_strength <-  model_results$net.result
cor(predicted_strength, concrete_test$strength)
concrete_model2 <- neuralnet(formula=strength ~ cement + slag + ash  +
water +superplastic + coarseagg  + fineagg  + age, data =concrete_train , hidden=c(5,2) )
hidden=  c(5,  2)
plot(concrete_model2)
model_results <-  compute(concrete_model2, concrete_test[1:8])
predicted_strength2 <-  model_results$net.result
cor(predicted_strength2, concrete_test$strength)
install.packages("nnet")
library(nnet)
library(gmodels)
wine <- read.csv("wine.csv")
head(wine)
str(wine)
wine.scale <- cbind(wine[1], scale(wine[-1]))
summary(wine.scale)
size <- nrow(wine.scale)
size
set.seed(100)
index <- c(sample(1:size, size * 0.7))
train <- wine.scale[index, ]
test <- wine.scale[-index, ]
model.nnet2 <- nnet(Type ~ ., data = train, size = 2, decay = 5e-04, maxit = 200)
predicted <- predict(model.nnet2, test, type = "class")
model.nnet2 <- nnet(Type ~ ., data = train, size = 2, decay = 5e-04, maxit = 200)
wine <- read.csv("wine.csv")
head(wine)
str(wine)
wine.scale <- cbind(wine[1], scale(wine[-1]))
summary(wine.scale)
size <- nrow(wine.scale) # 178
set.seed(100)
index <- c(sample(1:size, size * 0.7))
train <- wine.scale[index, ]
test <- wine.scale[-index, ]
model.nnet2 <- nnet(Type ~ ., data = train, size = 2, decay = 5e-04, maxit = 200)
wine <- read.csv("wine.csv",stringsAsFactors = T)
head(wine)
str(wine)
wine.scale <- cbind(wine[1], scale(wine[-1]))
summary(wine.scale)
size <- nrow(wine.scale) # 178
set.seed(100)
index <- c(sample(1:size, size * 0.7))
train <- wine.scale[index, ]
test <- wine.scale[-index, ]
model.nnet2 <- nnet(Type ~ ., data = train, size = 2, decay = 5e-04, maxit = 200)
predicted <- predict(model.nnet2, test, type = "class")
predicted
actual <- test$Type
model.confusion.matrix <- table(actual, predicted)
CrossTable(model.confusion.matrix)
