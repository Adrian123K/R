emp$comm[is.na(emp$comm)] <- ave(sal, deptno, FUN=function(x) mean(X))
emp$comm[is.na(emp$comm)] <- ave(emp$sal, emp$deptno, FUN=function(x) mean(X))
emp <- read.csv("emp3.csv", header=T)
attach(emp)
emp$deptsal <- ave(sal, deptno, FUN=function(x) mean(x))
emp$jobsal <- ave(sal, job, FUN=function(x) mean(x))
emp$comm[is.na(emp$comm)] <- ave(emp$sal, emp$deptno, FUN=function(x) mean(X))
emp$comm[is.na(emp$comm)] <- ave(emp$sal, emp$deptno, FUN=function(x) mean(x))
emp
emp
# 1. 데이터를 로드한다.
teens <-  read.csv("snsdata.csv")
str(teens)
table(teens$gender)
table(teens$gender, useNA="ifany")
teens$age <- ifelse(teens$age>=13 & teens$age <20, teens$age, NA)
teens$female <- ifelse(teens$gender=="F" & !is.na(teens$gender),  1, 0)
teens$no_gender <- ifelse(is.na(teens$gender),1,0)
table(teens$gender, useNA="ifany")
table(teens$female, useNA="ifany")
table(teens$no_gender, useNA="ifany")
ave_age <- ave(teens$age, teens$gradyear,   FUN=function(x) mean(x, na.rm=TRUE) )
teens$age <- ifelse( is.na(teens$age), ave_age, teens$age)
interests <- teens[5:40]
interests_z <- as.data.frame(lapply(interests, scale))
set.seed(2345)
teen_clusters <- kmeans(interests_z, 5)
teen_clusters
teen_clusters$size
teen_clusters$centers
teen_clusters$cluster
myknn <- function(train, test, cl, k) {
pred <- c()
for (i in 1:nrow(test)) {
temp <- t(t(train)-c(t(test[i,])))^2
temp <- sqrt(rowSums(temp))
table <- data.frame(train, kind=cl, d=temp)
table$rnk <- rank(table$d, ties.method = 'min')
top <- table[table$rnk <= k,'kind']
pred <- append(pred, names(which.max(table(top))))
}
return(pred)
}
# 1. 유방암 데이터를 로드 한다.
wbcd <-  read.csv("wisc_bc_data.csv", header=T,  stringsAsFactors=FALSE)
# 2. diagnosis 를 factor 로 변환한다
wbcd$diagnosis <- factor(wbcd$diagnosis,
levels =c("B","M"),
labels = c("Benign","Maliganant"))
# 3. 데이터를 shuffle 시킨다.
wbcd_shuffle <- wbcd[sample(nrow(wbcd)), ]
# 4. 데이터에서 id 를 제외 시킨다
wbcd2 <- wbcd_shuffle[-1]
# 5. 데이터를 정규화 한다.
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x))  )
}
wbcd_n  <- as.data.frame(lapply(wbcd2[2:31],normalize))
# 6. train 데이터와 test 데이터로 9 대 1로 나눈다
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
# 7. train 데이터를 데이터와 라벨로 나누고 test  데이터를 데이터와 라벨로 나누시오
wbcd_train_label <- wbcd2[1:train_num,1]
wbcd_test_label <- wbcd2[(train_num+1):nrow(wbcd_n),1]
# 8. 직접 만든 my_knn 모델로 훈련시켜서 모델을 만들고 바로 그 모델에 test 데이터를 넣어서 정확도를 확인한다
result1 <- myknn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
result1
library(gmodels)
CrossTable(wbcd_test_label,wbcd_train_label)
CrossTable(wbcd_test_label,result1)
a <- matrix(c(4,3,2,5,2,4,2,9,8,2,3,3,9,3,2,4,3,2,1,2),nrow=5)
a
a <- matrix(c(4,3,2,5,2,4,2,9,8,2,3,3,9,3,2,4,3,2,1,2),nrow=5,byrow = T)
a
b <- matrix(c(3,4,3,2,2,1,3,2,3,2,3,2,1,2,2,1,2,1,4,3),nrow=5,byrow=T)
a-b
c <- matrix(c(3,4,3,2),nrow=1,byrow=T)
c
rs <- matrix(dim=4)
rs <- matrix(c(repeat(0,20)),nrow=5)
rs <- matrix(rep(0,20),nrow=5)
rs
for (i in 1:nrow(a)){
rs[i] <- a[i]-c
}
rs <- matrix(c())
rs <- matrix(c(rep(0,20)),nrow=5)
rs
print(a[i]-c)
a <- matrix(c(4,3,2,5,2,4,2,9,8,2,3,3,9,3,2,4,3,2,1,2),nrow=5,byrow=T)
c <- matrix(c(3,4,3,2),nrow=1,byrow=T)
for (i in 1:nrow(a)){
print(a[i]-c)
}
rs <- matrix(c(rep(0,4)),nrow=1)
for (i in 1:nrow(a)){
rbind(rs,a[i]-c)
}
rs
for (i in 1:nrow(a)){
rbind(a[i]-c,rs)
}
rs
for (i in 1:nrow(a)){
rbind(a[i]-c,rs)
}
rs
rbind(rs,a[i]-c)
for (i in 1:nrow(a)){
rbind(rs,a[i]-c)
}
rs
rs <- matrix(c(rep(0,4)),nrow=1)
for (i in 1:nrow(a)){
rw <- a[i]-c
rbind(rs,rw)
}
rs
rw
c <- matrix(c(3,4,3,2),nrow=1,byrow=T)
c
rs <- matrix(c(rep(0,4)),nrow=1)
rs
rs <- matrix(c(rep(0,20)),nrow=5)
a <- matrix(c(4,3,2,5,2,4,2,9,8,2,3,3,9,3,2,4,3,2,1,2),nrow=5,byrow=T)
c <- matrix(c(3,4,3,2),nrow=1,byrow=T)
for (i in 1:nrow(a)){
for (j in 1:ncol(a)){
rs[i,j] <- a[i,j]-c[j]
}
}
rs
a <- matrix(c(4,3,2,5,2,4,2,9,8,2,3,3,9,3,2,4,3,2,1,2),nrow=5,byrow=T)
c <- matrix(c(3,4,3,2),nrow=1,byrow=T)
rs <- c()
for (i in 1:nrow(a)){
rbind(rs,a[i]-c)
}
rs
CrossTable(wbcd_test_label,result1)
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=12,byrow=T)
raw
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=12,byrow=T,colnames=c('x','y'))
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=12,byrow=T,colnames(c('x','y')))
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=12,ncol=2,byrow=T,colnames(c('x','y')))
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=10,ncol=2,byrow=T,colnames(c('x','y')))
raw
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=10,ncol=2,byrow=T,colnames=c('x','y'))
raw
raw <- matrix(c(1,1,1,2,2,3,2,5,3,4,5,1,6,8,7,7,9,8,10,6),nrow=10,ncol=2,byrow=T)
raw
t(raw)
sample(raw,1)
sample(raw,1)
sample(raw,1)
sample(raw,1)
sample(raw,1)
sample(raw,1)
sample(raw,1)
sample(raw,1)
sample(raw,1)
center <- raw[index]
center
index <- sample(nrow(raw),1)
center <- raw[index]
center
center
center
center
sample(raw[,sample(nrow(raw),1)],2,replace=F)
sample(raw[sample(nrow(raw),1),],1,replace=F)
sample(raw[sample(nrow(raw),1),],2,replace=F)
sample(raw[sample(nrow(raw),1),],2,replace=F)
sample(raw[sample(nrow(raw),1),],2,replace=F)
center <- raw[sample(nrow(raw),1),]
center
center <- raw[sample(nrow(raw),1),]
center
center <- raw[sample(nrow(raw),2),]
center
raw
center
sqrt(sum(center[1]))
center
sum(center[1])
sqrt(sum(center[1,]))
sum(center[1,])
sqrt(sum(center[1,])^2)
sqrt(sum(center[1,]^2))
sum(center[1,]^2)
rs <- matrix(c(rep(0),nrow(raw)),nrow=nrow(raw))
rs
rs <- matrix(c(rep(0,nrow(raw))),nrow=nrow(raw),ncol=ncol(raw))
rs
d <- c()
while (cnt!=nrow(center)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
d <- append(sqrt(sum((raw[i,]-center[j,])^2)))
}
}
}
cnt <- 0
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
d <- append(sqrt(sum((raw[i,]-center[j,])^2)))
}
}
cnt <- cnt + 1
}
cnt <- 0
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
d <- append(sqrt(sum((raw[i,]-center[j,])^2)))
}
}
cnt <- cnt + 1
}
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
append(d,sqrt(sum((raw[i,]-center[j,])^2)))
}
}
cnt <- cnt + 1
}
d
append(d,sqrt(sum((raw[i,]-center[j,])^2)),-1)
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
append(d,sqrt(sum((raw[i,]-center[j,])^2)),-1)
}
}
cnt <- cnt + 1
}
d
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
append(d,sqrt(sum((raw[i,]-center[j,])^2)),1)
}
}
cnt <- cnt + 1
}
d
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
print(sqrt(sum((raw[i,]-center[j,])^2)))
}
}
cnt <- cnt + 1
}
nrow(raw)
cnt <- 1
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
print(sqrt(sum((raw[i,]-center[j,])^2)))
}
}
cnt <- cnt + 1
}
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
append(d,sqrt(sum((raw[i,]-center[j,])^2)),1)
}
}
cnt <- cnt + 1
}
d
while (cnt!=nrow(raw)){
for (i in 1:nrow(raw)){
for (j in 1:nrow(center)){
append(d,sqrt(sum((raw[i,]-center[j,])^2)),0)
}
}
cnt <- cnt + 1
}
d
for (i in 1:nrow(raw)){
temp <- sqrt(rowSums(t(t(raw)-c(t(center[i,])))^2))
}
for (i in 1:nrow(raw)){
temp <- sqrt(rowSums(t(t(raw)-c(t(center[i,])))^2))
table <- data.frame(raw,d=temp)
}
for (i in 1:nrow(raw)){
for (i in 1:nrow(raw)){
for (i in 1:nrow(raw)){
temp <- t(t(raw)-c(t(center[i,])))^2
temp <- sqrt(rowSums(temp))
table <- data.frame(raw,d=temp)
}
rs
sqrt(sum(center[1,]^2))
rs <- c()
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[1,])^2))
rs <- temp
}
rs
rs <- as.matrix(c(rep(0,nrow(raw))))
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[1,])^2))
rs <- temp
}
rs
rs
rs <- as.matrix(c(rep(0,nrow(raw))))
rs
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[1,])^2))
rs[i] <- temp
}
rs
rs <- as.matrix(c(rep(0,nrow(raw))),ncol=2)
rs
rs <- matrix(c(rep(0,nrow(raw))),ncol=2)
rs
rs <- matrix(c(rep(0,nrow(raw)*ncol(raw))),ncol=2)
rs
for (j in 1:nrow(center)){
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[j,])^2))
rs[i] <- temp
}
}
rs
for (j in 1:nrow(center)){
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[j,])^2))
rs[j,i] <- temp
}
}
rs
for (j in 1:nrow(center)){
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[j,])^2))
rs[i,j] <- temp
}
}
rs
rs <- data.frame(v1=center[1],v2=center[2],d1,d2)
rs <- data.frame(v1=center[1],v2=center[2])
rs
rs <- data.frame(v1=center[1,],v2=center[2,])
rs
center
rs <- data.frame(v1=c(center[1,1],center[1,2]),v2=c(center[2,1],center[2,2]))
rs
raw
rs <- data.frame(x=raw[,1],y=raw[,2])
rs
rs
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1 <- temp
}
rs
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- temp
rs
for (i in 1:nrow(raw)){
temp <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- temp
}
rs
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- rank(rs$d1,ties.method = 'min')
rs
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- dense_rank(rs$d1,ties.method = 'min')
library(doBy)
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- dense_rank(rs$d1,ties.method = 'min')
library(dplyr)
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- dense_rank(rs$d1,ties.method = 'min')
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- dense_rank(rs$d1)
rs
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- orderBy(~-dense_rank(rs$d1))
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- dense_rank(rs$d1)
orderBy(~rank,rs)
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs$rank <- row_number(rs$d1)
orderBy(~rank,rs)
emp
colMeans(emp$index)
colMeans(emp)
emp <- emp[,c('index','sal')]
emp
colMeans(emp)
rs <- data.frame(x=raw[,1],y=raw[,2])
rs <- data.frame(x=raw[,1],y=raw[,2])
for (i in 1:nrow(raw)){
d <- sqrt(sum((raw[i,]-center[j,])^2))
rs$d1[i] <- d
}
rs
t(rs)
rowSums(t(rs[3]))
rowSums(t(rs[1]))
rowMeans(t(rs[1]))
rowMenas(t(rs[2]))
rowMeans(t(rs[2]))
center
t(center
t(center)
t(center)
sms_result <- read.csv('sms_results.csv')
head(sms_result)
library(gmodels)
CrossTable(sms_result[,2],sms_result[,1])
CrossTable(sms_result$actual_type,sms_result$predict_type)
head(sms_result)
CrossTable(sms_result$actual_type,sms_result$predict_type)
CrossTable(sms_result$predict_type,sms_result$actual_type)
install.packages('wcd')
library(wcd)
library(wcd)
install.packages('vcd')
library(vcd)
kappa(Table(sms_result$predict_type,sms_result$actual_type))
library(data.table)
kappa(Table(sms_result$predict_type,sms_result$actual_type))
kappa(table(sms_result$predict_type,sms_result$actual_type))
Kappa(table(sms_result$predict_type,sms_result$actual_type))
table(sms_result$predict_type,sms_result$actual_type)
pr_e <- (0.868*0.888)+(0.112*0.132)
pr_e
0.8306+(156/1390)
2*(156/1390)*(152/156)/(0.8306+(156/1390))
install.packages('caret')
install.packages("caret")
library(caret)
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
specificity(sms_result$predict_type,sms_result$actual_type,negative='ham')
sms_result <- read.csv('sms_results.csv',stringsAsFactors = T)
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
specificity(sms_result$predict_type,sms_result$actual_type,negative='ham')
posPredValue(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
specificity(sms_result$predict_type,sms_result$actual_type,negative = 'ham')
posPredValue(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
specificity(sms_result$predict_type,sms_result$actual_type,negative = 'ham')
posPredValue(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
install.packages('ROCR')
library(ROCR)
head(sms_result)
pred <- prediction(predictions = sms_result$prob_spam,
labels = sms_result$actual_type)
pred
# ROC curves
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
dev.new()
dev.new()
plot(perf, main = "ROC curve for SMS spam filter", col = "blue", lwd = 2)
# add a reference line to the graph
# 대각선 출력
abline(a = 0, b = 1, lwd = 2, lty = 2)
# calculate AUC
perf.auc <- performance(pred, measure = "auc")
str(perf.auc)
unlist(perf.auc@y.values)
CrossTable(sms_result$predict_type,sms_result$actual_type)
precision <- posPredValue(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
recall <- sensitivity(sms_result$predict_type,sms_result$actual_type,positive = 'spam')
Fmeasure <- 2*precision*recall/(precision+recall)
Fmeasure
