menuSubItem('histplot',tabName='histplot')
)
)
)
body <- dashboardBody(
tabItems(
##### table_format
tabItem(tabName = "tableformat",
mainPanel(
DT::dataTableOutput("table")
)
)
),
tabItems(
##### bar plot
tabItem(tabName = "barplot",
sidebarPanel(
selectInput("in_sel_bar_yVar","y Variable:", choices = NULL),
selectInput("in_sel_bar_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_bar')
)
),
##### advanced bar plot
tabItem(tabName = "barplotly",
sidebarPanel(
selectInput("in_sel_barly_show","show", choices = NULL),
selectInput("in_sel_barly_yVar","y Variable:", choices = NULL),
selectInput("in_sel_barly_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plotly_bar')
)
),
##### piechart
tabItem(tabName = "piechart",
sidebarPanel(
selectInput("in_sel_pie_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_pie')
)
),
##### line plot
tabItem(tabName = "lineplot",
sidebarPanel(
selectInput("in_sel_line_yVar","y Variable:", choices = NULL),
selectInput("in_sel_line_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_line')
)
),
##### scatter plot
tabItem(tabName = "scatterplot",
sidebarPanel(
selectInput("in_sel_scatter_yVar","y Variable:", choices = NULL),
selectInput("in_sel_scatter_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_scatter'),
textOutput('text_scatter')
)
),
##### box plot
tabItem(tabName = "boxplot",
sidebarPanel(
selectInput("in_sel_box_Var1","Variable 1:", choices = NULL),
selectInput("in_sel_box_Var2","Variable 2:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_box')
)
),
##### hist plot
tabItem(tabName = "histplot",
sidebarPanel(
selectInput("in_sel_hist_yVar","y Variable:", choices = NULL),
selectInput("in_sel_hist_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_hist')
)
)
)
)
ui<-dashboardPage(
dashboardHeader(title='Adrian Auto'),
sidebar,
body
)
server <- function(input, output,session) {
options(warn = -1)
options(shiny.maxRequestSize = 30*1024^2)
dataload<-reactive({
# 서버로 해당 파일 불러옴
req(input$file1)
# 파일이름을 file1 변수에 넣음
file1 = input$file1
# 파일이름.csv가 불러와져서 data1에 로드됨
data1 = read.csv(file1$datapath)
updateSelectInput(session, "in_sel_bar_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_bar_yVar", choices = colnames(data1))
updateSelectInput(session,"in_sel_barly_show",choices=c('col','row'))
updateSelectInput(session, "in_sel_barly_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_barly_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_pie_xVar", choices = data1[,1])
updateSelectInput(session, "in_sel_line_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_line_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_scatter_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_scatter_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_box_Var1", choices = colnames(data1))
updateSelectInput(session, "in_sel_box_Var2", choices = colnames(data1))
updateSelectInput(session, "in_sel_hist_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_hist_xVar", choices = colnames(data1))
return(data1)
})
####table_format
output$table <- DT::renderDataTable(DT::datatable({
req(input$file1)
file1 = input$file1
data1 = read.csv(file1$datapath)
}))
####nomal_bar
output$plot_bar <- renderPlot({
table_in<-dataload()
xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
fdata=data.frame(x=xdata,y=ydata)
ggplot(fdata) +
geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
})
####advenced_bar
output$plotly_bar <- renderPlotly({
table_in<-dataload()
if(input$in_sel_barly_show=='col'){
plot_ly(x=~table_in[,input$in_sel_barly_xVar],y=~table_in[,input$in_sel_barly_yVar],type='bar',marker = list(color = brewer.pal(nrow(table_in), "Paired"))) %>%
layout(xaxis= list(title=input$in_sel_barly_xVar) , yaxis = list(title=input$in_sel_barly_yVar))
}
else if(input$in_sel_barly_show=='row'){
plot_ly(x=~table_in[,input$in_sel_barly_xVar],y=~table_in[,input$in_sel_barly_yVar],type='bar',orientation = "h",marker = list(color = brewer.pal(nrow(table_in), "Paired"))) %>%
layout(xaxis= list(title=input$in_sel_barly_xVar) , yaxis = list(title=input$in_sel_barly_yVar))
}
})
####pie
output$plot_pie <- renderPlotly({
table_in<-dataload()
plot_ly(table_in, labels = ~colnames(table_in)[-1], values=~as.factor( table_in[table_in[,1] == input$in_sel_pie_xVar,-1] ),type='pie')
})
####line
output$plot_line <- renderPlotly({
table_in<-dataload()
x <- list(title = input$in_sel_line_xVar)
y <- list(title = input$in_sel_line_yVar)
plot_ly(data = table_in,x=~table_in[,input$in_sel_line_xVar],y=~table_in[,input$in_sel_line_yVar],type='scatter',mode='dot')%>%
layout(xaxis = x, yaxis = y)
})
####scatter
output$plot_scatter <- renderPlot({
table_in<-dataload()
xyplot(table_in[,input$in_sel_scatter_yVar]~table_in[,input$in_sel_scatter_xVar], grid=T,type=c('p','smooth'),col.line='darkorange',lwd=2, xlab=input$in_sel_scatter_xVar,ylab=input$in_sel_scatter_yVar)
})
output$text_scatter <- renderText({
table_in<-dataload()
paste("The correlation between the two is: ", cor(table_in[,input$in_sel_scatter_yVar],table_in[,input$in_sel_scatter_xVar]))
})
####boxplot(사분위수)
output$plot_box <- renderPlotly({
table_in<-dataload()
subplot(
add_markers = plot_ly(data = table_in, y=~table_in[,input$in_sel_box_Var1],type='box',name=input$in_sel_box_Var1) %>%
layout(yaxis=list(title=input$in_sel_box_Var1)),
add_markers = plot_ly(data = table_in, y=~table_in[,input$in_sel_box_Var2],type='box',name=input$in_sel_box_Var2) %>%
layout(yaxis=list(title=input$in_sel_box_Var2))
)
})
###histplot(히스토그램)
output$plot_hist <- renderPlotly({
table_in<-dataload()
plot_ly(data=table_in, x=~table_in[,input$in_sel_hist_xVar], y=~table_in[,input$in_sel_hist_yVar], type='histogram') %>%
layout(title=input$in_sel_box_xVar, xaxis=list(title=in_sel_hist_xVar,zerolines=F),yaxis=list(title=in_sel_hist_yVar,zerolines=T))
})
}
shinyApp(ui = ui, server = server)
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
packages <- c("shinydashboard", "shiny", "ggplot2", "plotly", "lattice")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
require(shinydashboard)
require(shiny)
require(ggplot2)
require(plotly)
require(lattice)
require(RColorBrewer)
sidebar <- dashboardSidebar(
sidebarMenu(
# fileInput : csv 파일 및 다양한 파일들을 불러오는 화면 구현
fileInput("file1", "Choose CSV File",
multiple = FALSE,
accept = c("text/csv",".xlsx",".txt",
"text/comma-separated-values,text/plain",
".csv")),
menuItem("Table",
menuSubItem('Tableformat',tabName='tableformat') ),
menuItem("Plot",
menuSubItem('barplot',tabName='barplot'),
menuSubItem('barplot_advenced',tabName='barplotly'),
menuSubItem('pieplot',tabName='piechart'),
menuSubItem('lineplot',tabName='lineplot'),
menuSubItem('scatterplot',tabName='scatterplot'),
menuSubItem('boxplot',tabName='boxplot'),
menuSubItem('histplot',tabName='histplot')
)
)
)
body <- dashboardBody(
tabItems(
##### table_format
tabItem(tabName = "tableformat",
mainPanel(
DT::dataTableOutput("table")
)
)
),
tabItems(
##### bar plot
tabItem(tabName = "barplot",
sidebarPanel(
selectInput("in_sel_bar_yVar","y Variable:", choices = NULL),
selectInput("in_sel_bar_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_bar')
)
),
##### advanced bar plot
tabItem(tabName = "barplotly",
sidebarPanel(
selectInput("in_sel_barly_show","show", choices = NULL),
selectInput("in_sel_barly_yVar","y Variable:", choices = NULL),
selectInput("in_sel_barly_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plotly_bar')
)
),
##### piechart
tabItem(tabName = "piechart",
sidebarPanel(
selectInput("in_sel_pie_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_pie')
)
),
##### line plot
tabItem(tabName = "lineplot",
sidebarPanel(
selectInput("in_sel_line_yVar","y Variable:", choices = NULL),
selectInput("in_sel_line_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_line')
)
),
##### scatter plot
tabItem(tabName = "scatterplot",
sidebarPanel(
selectInput("in_sel_scatter_yVar","y Variable:", choices = NULL),
selectInput("in_sel_scatter_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_scatter'),
textOutput('text_scatter')
)
),
##### box plot
tabItem(tabName = "boxplot",
sidebarPanel(
selectInput("in_sel_box_Var1","Variable 1:", choices = NULL),
selectInput("in_sel_box_Var2","Variable 2:", choices = NULL)
),
mainPanel(
plotlyOutput('plot_box')
)
),
##### hist plot
tabItem(tabName = "histplot",
sidebarPanel(
selectInput("in_sel_hist_xVar","x Variable:", choices = NULL)
),
mainPanel(
plotOutput('plot_hist')
)
)
)
)
ui<-dashboardPage(
dashboardHeader(title='Adrian Auto'),
sidebar,
body
)
server <- function(input, output,session) {
options(warn = -1)
options(shiny.maxRequestSize = 30*1024^2)
dataload<-reactive({
# 서버로 해당 파일 불러옴
req(input$file1)
# 파일이름을 file1 변수에 넣음
file1 = input$file1
# 파일이름.csv가 불러와져서 data1에 로드됨
data1 = read.csv(file1$datapath)
updateSelectInput(session, "in_sel_bar_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_bar_yVar", choices = colnames(data1))
updateSelectInput(session,"in_sel_barly_show",choices=c('col','row'))
updateSelectInput(session, "in_sel_barly_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_barly_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_pie_xVar", choices = data1[,1])
updateSelectInput(session, "in_sel_line_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_line_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_scatter_xVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_scatter_yVar", choices = colnames(data1))
updateSelectInput(session, "in_sel_box_Var1", choices = colnames(data1))
updateSelectInput(session, "in_sel_box_Var2", choices = colnames(data1))
updateSelectInput(session, "in_sel_hist_xVar", choices = colnames(data1))
return(data1)
})
####table_format
output$table <- DT::renderDataTable(DT::datatable({
req(input$file1)
file1 = input$file1
data1 = read.csv(file1$datapath)
}))
####nomal_bar
output$plot_bar <- renderPlot({
table_in<-dataload()
xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
fdata=data.frame(x=xdata,y=ydata)
ggplot(fdata) +
geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
})
####advenced_bar
output$plotly_bar <- renderPlotly({
table_in<-dataload()
if(input$in_sel_barly_show=='col'){
plot_ly(x=~table_in[,input$in_sel_barly_xVar],y=~table_in[,input$in_sel_barly_yVar],type='bar',marker = list(color = brewer.pal(nrow(table_in), "Paired"))) %>%
layout(xaxis= list(title=input$in_sel_barly_xVar) , yaxis = list(title=input$in_sel_barly_yVar))
}
else if(input$in_sel_barly_show=='row'){
plot_ly(x=~table_in[,input$in_sel_barly_xVar],y=~table_in[,input$in_sel_barly_yVar],type='bar',orientation = "h",marker = list(color = brewer.pal(nrow(table_in), "Paired"))) %>%
layout(xaxis= list(title=input$in_sel_barly_xVar) , yaxis = list(title=input$in_sel_barly_yVar))
}
})
####pie
output$plot_pie <- renderPlotly({
table_in<-dataload()
plot_ly(table_in, labels = ~colnames(table_in)[-1], values=~as.factor( table_in[table_in[,1] == input$in_sel_pie_xVar,-1] ),type='pie')
})
####line
output$plot_line <- renderPlotly({
table_in<-dataload()
x <- list(title = input$in_sel_line_xVar)
y <- list(title = input$in_sel_line_yVar)
plot_ly(data = table_in,x=~table_in[,input$in_sel_line_xVar],y=~table_in[,input$in_sel_line_yVar],type='scatter',mode='dot')%>%
layout(xaxis = x, yaxis = y)
})
####scatter
output$plot_scatter <- renderPlot({
table_in<-dataload()
xyplot(table_in[,input$in_sel_scatter_yVar]~table_in[,input$in_sel_scatter_xVar], grid=T,type=c('p','smooth'),col.line='darkorange',lwd=2, xlab=input$in_sel_scatter_xVar,ylab=input$in_sel_scatter_yVar)
})
output$text_scatter <- renderText({
table_in<-dataload()
paste("The correlation between the two is: ", cor(table_in[,input$in_sel_scatter_yVar],table_in[,input$in_sel_scatter_xVar]))
})
####boxplot(사분위수)
output$plot_box <- renderPlotly({
table_in<-dataload()
subplot(
add_markers = plot_ly(data = table_in, y=~table_in[,input$in_sel_box_Var1],type='box',name=input$in_sel_box_Var1) %>%
layout(yaxis=list(title=input$in_sel_box_Var1)),
add_markers = plot_ly(data = table_in, y=~table_in[,input$in_sel_box_Var2],type='box',name=input$in_sel_box_Var2) %>%
layout(yaxis=list(title=input$in_sel_box_Var2))
)
})
###histplot(히스토그램)
output$plot_hist <- renderPlotly({
table_in<-dataload()
plot_ly(x=~table_in[,input$in_sel_hist_xVar], type='histogram') %>% layout(title=input$in_sel_box_xVar)
})
}
shinyApp(ui = ui, server = server)
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
runApp('shiny.R')
#190
emp
#190
emp<-read.csv('emp3.csv',head=%)
#190
emp<-read.csv('emp3.csv',head=T)
plot(emp$comm, emp$sal)
emp$comm[is.na(emp$comm)]<-0
cor(emp$comm,emp$sal)
plot(car$mileage, car$price)
#191
plot(car$mileage, car$price, pch=21, col='red',bg='red')
cor(car$mileage, car$price)
runApp('shiny.R')
install.packages("gmodels")
library(gmodels)
emp
attach(emp)
tapply(empno, list(deptno,job), length, default=0)
CrossTable(emp$deptno, emp$job)
library(data.table)
data.frame(emp$sal, emp$sal>=2500)
data.frame(월급=emp$sal, 2500이상=emp$sal>=2500)
data.frame(월급=emp$sal, '2500이상'=emp$sal>=2500)
emp$sal_tf
emp$sal_tf<-emp$2500>=2500
emp$sal_tf
emp$sal_tf<-emp$sal>=2500
emp$sal_tf
emp
Crosstable(emp$job, emp$sal_tf)
CrossTable(emp$job, emp$sal_tf)
runApp('shiny.R')
#195
car
#195
car$conservative<- car$color %in% c('Black','Gray','Silver','White')
table(car$conservative)
CrossTable(car$model, car$conservative)
print(1-pchisq(q=8.33,df=1,lower.tail = T))
emp
income<-function(ename){
emp<-read.csv('emp3.csv',head=T)
sal<-emp[emp$ename==ename,'sal']
print(sal)
}
income('ALLEN')
# str_detect(): 특정 문자 포함 여부 확인(true,false)
f=c('apple',"Apple","banana","pineapple")
str_detect(f,'A')
library(stringr)
str_detect(f,'A')
str_detect(f,'^a') # ^a: 첫 문자 a
# str_count(): 특정 문자 출현 횟수
str_count(f,fixed('A',ignore_case=T))
# str_c(): 문자열 합치기
str_c('apple','pen')
str_c("Fruits:",f)
str_c(f," name is ", f)
str_c(f, collapse="")
# str_dup(): 반복
str_dup(f,3)
# str_locate(): 특정 문자의 위치(문자열에서 특정 문자가 처음나오는 위치와 마지막 위치)
str_locate('apple','a') # start와 end 위치는 동일
str_locate(f,'a') # 첫번째나오는 문자의 위치만 출력
# str_split(): 데이터셋을 지정된 기호로 분리
f2=str_c('apple','/','orange','/','banana');f2
library(sqldf)
Fruits
Fruit
Fruits
library(googleVis)
attach(Fruits)
Fruits
sqldf('select * from Fruits where Fruit=\'Apples\'')
str(Fruits)
w,h,s<-readLine(prompt='a, b, c?')
w<-readLine(prompt='')
w,h,s<-readline(prompt='')
w<-readline(prompt='')
h<-readline(prompt='')
# ifelse(a,b,c): a가 참이면 b, 거짓이면 c를 출력
no=scan()
num<-scan()
num[1]
num[2]
num[3]
if(num[1]^2+num[2]^2==num[3]^2){
print('직각삼각형이 맞습니다.')
} else {
print('직각삼각형이 아닙니다.')
}
pytha<-function(){
num<-scan()
if(num[1]^2+num[2]^2==num[3]^2){
print('직각삼각형이 맞습니다.')
} else {
print('직각삼각형이 아닙니다.')
}
}
pytha()
num<-scan()
str(num)
test<-scan()
pytha()
# paste('a','b','c'): a,b,c를 합쳐서 하나의 문자열로 출력
paste("홍","길","동",sep='')
pytha()
test<-scan()
test[9]
