predicted_label <- c(predicted_label,which(predicted[i,]==max(predicted[i,])))
}
CrossTable(unlist(test[,input$in_sel_label_neuralnet]),predicted_label,dnn=c('test_label','predicted_label'))
}
})
output$plot_neural <- renderPlot({
result <- subinput_table_neuralnet()
model <- result[[1]]
dev.off()
plot(model)
},height=600)
#### graph
#### bar_plot
output$plot_bar <- renderPlot({
table_in<-dataload()
xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
fdata=data.frame(x=xdata,y=ydata)
ggplot(fdata) +
geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
})
#### pie_chart
output$plot_pie <- renderPlotly({
table_in<-dataload()
plot_ly(table_in, labels = ~table_in[,input$in_sel_pie_xVar],
values = ~table_in[,input$in_sel_pie_yVar],type='pie')
})
#### line_plot
output$plot_line <- renderPlotly({
table_in<-dataload()
x <- list(title = input$in_sel_line_xVar)
y <- list(title = input$in_sel_line_yVar)
plot_ly(data = table_in,x=~table_in[,input$in_sel_line_xVar],y=~table_in[,input$in_sel_line_yVar],type='scatter',mode='dot')%>%
layout(xaxis = x, yaxis = y)
})
#### scatter_plot
output$plot_scatter <- renderPlot({
table_in<-dataload()
xyplot(table_in[,input$in_sel_scatter_yVar]~table_in[,input$in_sel_scatter_xVar], grid=T,type=c('p'),col.line='darkorange',lwd=2, xlab=input$in_sel_scatter_xVar,ylab=input$in_sel_scatter_yVar)
})
#### scatter_cov
output$text_scatter <- renderText({
table_in<-dataload()
paste("The correlation between the two is: ", cor(table_in[,input$in_sel_scatter_yVar],table_in[,input$in_sel_scatter_xVar]))
})
#### box_plot
output$plot_box <- renderPlot({
table_in<-dataload()
bwplot(table_in[,input$in_sel_box_xVar],xlab=input$in_sel_box_xVar)
})
#### box_summary
output$text_box <- renderPrint({
table_in<-dataload()
dataset <- table_in[,input$in_sel_box_xVar]
summary(dataset)
})
#### pairs
output$dependents_delcol_pairs <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_pairs',
label    = "Delete colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_pairs <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
ch <- c('None')
for (i in seq(colnames(data))){
if (is.numeric(data[1,i])==F){
ch <- c(ch,colnames(data)[i])
}
}
selectInput("in_sel_label_pairs","Submit",label = 'Select Colour',choices = ch)
})
output$dependents_button_pairs <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_pairs","Submit")
})
subinput_pairs <- eventReactive(input$in_btn_submit_pairs, {
req(input$file1)
file1 <- input$file1
data <- read.csv(file1$datapath)
data <- data[,!(colnames(data) %in% input$in_che_delcol_pairs )]
if (input$in_sel_label_pairs == 'None'){
pa <- ggpairs(data,aes_string(alpha=input$alpha))
}
else {
pa <- ggpairs(data,aes_string(colour = input$in_sel_label_pairs, alpha=input$alpha))
}
return(pa)
})
output$plot_pairs <- renderPlot({
subinput_pairs()
},height=len)
}
######################### 4. 샤이니 실행 #########################
shinyApp(ui = ui, server = server)
#1. 데이터를 로드 한다.
wbcd <- read.csv("wisc_bc_data.csv", header=T,  stringsAsFactors=FALSE)
table(wbcd$diagnosis)
runApp('auto.R')
# 라벨 column의 데이터 분포를 막대그래프로 시각화
hist(wbcd$diagnosis)
# 라벨 column의 데이터 분포를 막대그래프로 시각화
head(wbcd)
wbcd <- read.csv("wisc_bc_data.csv", header=T,  stringsAsFactors=FALSE)
table(wbcd$diagnosis)
# 라벨 column의 데이터 분포를 막대그래프로 시각화
head(wbcd)
library(outliers)
grubbs.flag <- function(x) {
outliers <- NULL
test <- x
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
while(pv < 0.05) {
outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
test <- x[!x %in% outliers]
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
}
return(data.frame(X=x,Outlier=(x %in% outliers)))
}
rs <- grubbs.flag(wbcd$radius_mean)
rs[rs$Outlier=='TRUE']
rs[rs$Outlier=='TRUE',]
rs2 <- rs[rs$Outlier=='TRUE',]
rs2
colnames(wbcd)
length(rs2)
rs2 <- rs[rs$Outlier=='TRUE',]
rs2
length(rs2$Outlier)
cn <- colnames(wbcd)
for (i in 1:length(cn)){
rs <- grubbs.flag(wbcd$cn[i])
rs2 <- rs[rs$Outlier=='TRUE',]
paste(cn[i],length(rs2$Outlier))
}
cn[1]
as.character(cn[1])
cn <- colnames(wbcd)
for (i in 1:length(cn)){
rs <- grubbs.flag(wbcd$cn[i])
rs2 <- rs[rs$Outlier=='TRUE',]
paste(cn[i],'-->',length(rs2$Outlier))
}
print(cn[i])
for (i in 1:length(cn)){
print(cn[i])
rs <- grubbs.flag(wbcd$cn[i])
rs2 <- rs[rs$Outlier=='TRUE',]
paste(cn[i],'-->',length(rs2$Outlier))
}
cn <- colnames(wbcd)
for (i in 1:length(cn)){
rs <- grubbs.flag(cn[i])
rs2 <- rs[rs$Outlier=='TRUE',]
paste(cn[i],'-->',length(rs2$Outlier))
}
paste('wbcd','$','id')
cn <- colnames(wbcd)
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
paste(cn[i],'-->',length(rs2$Outlier))
}
cn <- colnames(wbcd)
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
paste(i,'-->',length(rs2$Outlier))
}
cn <- colnames(wbcd)
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
print(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
length(rs2$Outlier)
for (i in cn){
rs <- 0
rs2 <- 0
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
cn <- colnames(wbcd)
for (i in cn){
rs <- NA
rs2 <- NA
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
cn <- colnames(wbcd)
for (i in cn){
rs <- c()
rs2 <- c()
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
if (!is.na(rs2)){
rs <- c()
rs2<-c()
}
}
cn <- colnames(wbcd)
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
if (!is.na(rs2)){
rs <-NA
rs2<-NA
}
}
for (i in length(cn)){
for (j in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
rs <- c()
rs2 <- c()
}
cn <- colnames(wbcd)
cn
cn <- cn[c(-1,-2)]
cn
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(j,'-->',length(rs2$Outlier)))
}
cn <- cn[c(-1,-2,-3,-4)]
cn
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(j,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
cn <- cn[c(-1,-2)]
cn
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE','Outlier']
paste(i,'-->',length(rs2$Outlier))
}
cn <- colnames(wbcd)
cn <- cn[c(-1,-2)]
cn
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE','Outlier']
paste(i,'-->',length(rs2$Outlier))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
cn <- colnames(wbcd)
cn
cn <- cn[c(-1,-2)]
cn
cn <- colnames(wbcd)[c(-1,-2)]
cn
for (i in cn){
rs <- grubbs.flag(wbcd$i)
print(rs)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(rs2)
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
print(i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
print(i)
rs2 <- rs[rs$Outlier=='TRUE',]
#print(paste(i,'-->',length(rs2$Outlier)))
}
round(prop.table(table(wbcd$diagnosis))*100,digit=1)
for (i in cn){
rs <- grubbs.flag(wbcd$i)
print(i)
rs2 <- rs[rs$Outlier=='TRUE',]
#print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(rs2)
#print(paste(i,'-->',length(rs2$Outlier)))
}
#3. 데이터를 shuffle 시킨다.
# wbcd[sample(10),] # 1번~10번까지의 데이터가 섞여서 출력이됨
wbcd_shuffle <- wbcd[sample(nrow(wbcd)), ]
wbcd_shuffle
#4. 데이터에서 id 를 제외 시킨다
wbcd2 <- wbcd_shuffle[-1]
head(wbcd2)
#5. 데이터를 정규화 한다.
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x))  )
}
wbcd_n  <- as.data.frame(lapply(wbcd2[2:31],normalize))
summary(wbcd_n)
nrow(wbcd_n)
train_num <- round(0.9*nrow(wbcd_n),0)
wbcd_train <- wbcd_n[1:train_num]
wbcd_train <- wbcd_n[1:train_num,]
wbcd_test <- wbcd_n[(train_num+1):nrow(wbcd_n),1]
wbcd_test <- wbcd_n[(train_num+1):nrow(wbcd_n),]
nrow(wbcd_n)
train_num <- round(0.9*nrow(wbcd_n),0)
wbcd_train <- wbcd_n[1:train_num,]
wbcd_test <- wbcd_n[(train_num+1):nrow(wbcd_n),]
wbcd_train_label <- wbcd2[1:train_num,1]
wbcd_test_label <- wbcd2[(train_num+1):nrow(wbcd_n),1]
rs <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
install.packages('class')
install.packages("class")
library(class)
rs <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
install.packages('class')
install.packages("class")
library(class)
rs <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
#8. knn 모델로 훈련시켜서 모델을 만들고 바로 그 모델에 test 데이터를 넣어서 정확도를 확인한다
result1 <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
result1
#1. 데이터를 로드 한다.
wbcd <- read.csv("wisc_bc_data.csv", header=T,  stringsAsFactors=FALSE)
#2. diagnosis 를 factor 로 변환한다
wbcd$diagnosis <- factor(wbcd$diagnosis,
levels =c("B","M"),
labels = c("Benign","Maliganant"))
#3. 데이터를 shuffle 시킨다.
wbcd_shuffle <- wbcd[sample(nrow(wbcd)), ]
#4. 데이터에서 id 를 제외 시킨다
wbcd2 <- wbcd_shuffle[-1]
#5. 데이터를 정규화 한다.
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x))  )
}
wbcd_n  <- as.data.frame(lapply(wbcd2[2:31],normalize))
#6. train 데이터와 test 데이터로 9 대 1로 나눈다
train_num<-round(0.9*nrow(wbcd_n),0)
wbcd_train<-wbcd_n[1:train_num,]
wbcd_test<-wbcd_n[(train_num+1):nrow(wbcd_n),]
#7. train 데이터를 데이터와 라벨로 나누고 test  데이터를 데이터와 라벨로 나누시오 ~
wbcd_train_label <- wbcd2[1:train_num,1]
wbcd_test_label <- wbcd2[(train_num+1):nrow(wbcd_n),1]
#8. knn 모델로 훈련시켜서 모델을 만들고 바로 그 모델에 test 데이터를 넣어서 정확도를 확인한다
result1 <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
result1
wbcd <- read.csv("wisc_bc_data.csv", header=T,  stringsAsFactors=FALSE)
table(wbcd$diagnosis)
# 라벨 column의 데이터 분포를 막대그래프로 시각화
head(wbcd)
library(outliers)
grubbs.flag <- function(x) {
outliers <- NULL
test <- x
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
while(pv < 0.05) {
outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
test <- x[!x %in% outliers]
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
}
return(data.frame(X=x,Outlier=(x %in% outliers)))
}
rs <- grubbs.flag(wbcd$radius_mean)
rs2 <- rs[rs$Outlier=='TRUE',]
rs2
length(rs2$Outlier)
#223
cn <- colnames(wbcd)[c(-1,-2)]
cn
for (i in cn){
rs <- grubbs.flag(wbcd$i)
rs2 <- rs[rs$Outlier=='TRUE',]
print(rs2)
#print(paste(i,'-->',length(rs2$Outlier)))
}
for (i in 4:length(colnames(wbcd))){
a = grubbs.flag(wbcd[,colnames(wbcd)[i]])
b = a[a$Outlier==TRUE,"Outlier"]
print(paste(colnames(wbcd)[i],'-->',length(b)))
}
# 양성과 악성의 비율 확인
round(prop.table(table(wbcd$diagnosis))*100,digit=1)
#3. 데이터를 shuffle 시킨다.
# wbcd[sample(10),] # 1번~10번까지의 데이터가 섞여서 출력이됨
wbcd_shuffle <- wbcd[sample(nrow(wbcd)), ]
wbcd_shuffle
#4. 데이터에서 id 를 제외 시킨다
wbcd2 <- wbcd_shuffle[-1]
head(wbcd2)
#5. 데이터를 정규화 한다.
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x))  )
}
# 서로 단위가 다른 데이터를 전부 0-1사이의 데이터로 맞춰준다
wbcd_n  <- as.data.frame(lapply(wbcd2[2:31],normalize))
summary(wbcd_n)
nrow(wbcd_n)
train_num <- round(0.9*nrow(wbcd_n),0)
wbcd_train <- wbcd_n[1:train_num,]
wbcd_test <- wbcd_n[(train_num+1):nrow(wbcd_n),]
wbcd_train_label <- wbcd2[1:train_num,1]
wbcd_test_label <- wbcd2[(train_num+1):nrow(wbcd_n),1]
install.packages('class')
library(class)
rs <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
install.packages("class")
wbcd_train_labels <- wbcd2[1:train_num,1]
wbcd_test_labels <- wbcd2[(train_num+1):nrow(wbcd_n),1]
rs <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_labels, k=21)
rs
x <- data.frame(실제=wbcd_test_labels, 예측=rs)
x
rs <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_labels, k=51)
rs
x <- data.frame(실제=wbcd_test_labels, 예측=rs)
x
table(x)
temp<-c()
for ( i in 1:200 ) {
if  ( i%%2 != 0  ) {
wbcd_test_pred <- knn(train=wbcd_train, test=wbcd_test,
cl = wbcd_train_labels,  k=i )
g2 <- CrossTable(x=wbcd_test_labels, y=wbcd_test_pred, chisq=FALSE)
g3 <- g2$prop.tbl[1] + g2$prop.tbl[4]
temp<-append(temp, g3 )
}
}
library(gmodels)
temp<-c()
for ( i in 1:200 ) {
if  ( i%%2 != 0  ) {
wbcd_test_pred <- knn(train=wbcd_train, test=wbcd_test,
cl = wbcd_train_labels,  k=i )
g2 <- CrossTable(x=wbcd_test_labels, y=wbcd_test_pred, chisq=FALSE)
g3 <- g2$prop.tbl[1] + g2$prop.tbl[4]
temp<-append(temp, g3 )
}
}
temp
plot(temp, type='l', col='red')
par(new=T)
g2 <- CrossTable(x=wbcd_test_labels, y=rs2,chisq=F)
g2 <- CrossTable(x=wbcd_test_labels, y=rs,chisq=F)
g2$prop.tbl[1]
g2$prop.tbl[4]
g2$prop.tbl[1]+g2$prop.tbl[4]
temp<-c()
for ( i in 1:200 ) {
if  ( i%%2 != 0  ) {
wbcd_test_pred <- knn(train=wbcd_train, test=wbcd_test,
cl = wbcd_train_labels,  k=i )
g2 <- CrossTable(x=wbcd_test_labels, y=wbcd_test_pred, chisq=FALSE)
g3 <- g2$prop.tbl[1] + g2$prop.tbl[4]
temp<-append(temp, g3 )
}
}
temp
plot(temp, type='l', col='red')
