library(rpart.plot)
rpart.plot(model, digits=3)
rpart.plot(model, digits=3, fallen.leaves=T, type=3, extra=101)
# 6. 위에서 만든 모델로 테스트 데이터의 라벨을 예측하시오 !
result <- predict(model, wine_test)
result
# 7. 테스트 데이터의 실제 라벨(품질) 과 예측결과(품질) 을 비교한다
cbind(round(result), wine_test$quality)
# 8. 테스트 데이터의 라벨과 예측 결과와 상관관계가 어떻게 되는지  확인한다.
cor(result, wine_test$quality)
# 9. 두 데이터간의 오차율을 확인
MAE <-  function( actual, predicted) {
mean(abs(actual - predicted))
}
MAE(result, wineTest$quality)
MAE(result, wine_test$quality)
# 1. 회귀트리 모델 생성하는 작업의 1번 ~ 3번까지 다시 반복
# 2. 모델트리를 구현하기 위한 패키지 설치
library(RWeka)
wine <- read.csv("whitewines.csv")
wine_train <- wine[1:3750,  ]
wine_test <- wine[3751:4898, ]
model_tree <- M5P(quality ~ ., data=wine_train)
model_tree
# 4. 만든 모델과 테스트 데이터로 예측을 한다.
p.m5p <- predict( m.m5p, wine_test)
# 4. 만든 모델과 테스트 데이터로 예측을 한다.
p.m5p <- predict( m.m5p, wine_test)
# 4. 만든 모델과 테스트 데이터로 예측을 한다.
p.m5p <- predict( model_tree.m5p, wine_test)
# 4. 만든 모델과 테스트 데이터로 예측을 한다.
p.m5p <- predict( model_tree, wine_test)
# 5. 예측값(p.m5p) 과 테스트 데이터의 라벨간의 상관관계를 확인한다
cor( p.m5p , wine_test$quality )
#6. 예측값(p.m5p) 과 테스트 데이터의 라벨간의 평균절대오차를 확인 한다.
MAE <-  function( actual, predicted) {
mean(abs(actual - predicted))
}
MAE( wine_test$quality, p.m5p)
p.m5p
model_tree <- cubist(wine_train, wine$quality)
install.packages('Cubist')
library(Cubist)
model_tree <- cubist(wine_train, wine$quality)
wine_train <- wine[1:3750,  ]
wine_test <- wine[3751:4898, ]
model_tree <- cubist(wine_train, wine$quality)
model_tree <- cubist(wine_train[-12], wine_train$quality)
model_tree
# 4. 만든 모델과 테스트 데이터로 예측을 한다.
p.cubist <- predict( model_tree, wine_test)
p.cubist
# 5. 예측값(p.m5p) 과 테스트 데이터의 라벨간의 상관관계를 확인한다
cor( p.cubist , wine_test$quality )
#6. 예측값(p.m5p) 과 테스트 데이터의 라벨간의 평균절대오차를 확인 한다.
MAE <-  function( actual, predicted) {
mean(abs(actual - predicted))
}
MAE(wine_test$quality, p.cubist)
# 5. 예측값(p.m5p) 과 테스트 데이터의 라벨간의 상관관계를 확인한다
cor( p.cubist , wine_test$quality )
MAE(wine_test$quality, p.cubist)
install.packages("rmarkdown")
install.packages("knitr")
library(rmarkdown)
library(knitr)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
summary(cars)
# Chunk 3: pressure
plot(pressure)
install.packages(c("adabag", "ROCR"))
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
new_inputs
k <- c(0,0,0,0)
k[1]
weight <- c(0.3,0.4,0.1)
weight[2]
l_rate <- 0.05
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
weight
new_inputs%*%weight
new_inputs[1]%*%weight
new_inputs[1,]%*%weight
k <- c(0,0,0,0)
sum(k)
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
l_rate <- 0.05
while (sum(k)!=0){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
}
}
}
weight
weight[1]
weight[2]
new_inputs
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
l_rate <- 0.05
while (sum(k)!=0){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
}
}
}
new_inputs
weight
print(weight)
while (sum(k)!=0){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
print(weight)
}
}
}
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
l_rate <- 0.05
while (sum(k)!=0){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
}
}
}
}
l_rate <- 0.05
l_rate <- 0.05
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
while (sum(k)!=0){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
}
}
}
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
while (sum(k)!=0){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
k <- c(0,0,0,0)
while (sum(k)!=0){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
weight[i] <- weight[i]+l_rate*new_inputs[i,1]*error
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
k <- c(0,0,0,0)
while (sum(k)!=0){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
for (j in 1:ncol(new_inputs)){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*k[i]
}
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
k[1] <- target[1]-new_inputs[1,]%*%weight
k[1]
k[3] <- target[3]-new_inputs[3,]%*%weight
k[3]
nrow(new_inputs)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
k <- c(0,0,0,0)
while (sum(k)!=0){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs)){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 1
while (cnt==4){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs)){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
while (cnt==4){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs)){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
while (cnt==4){
k <- c(0,0,0,0)
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs)){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
k <- c(0,0,0,0)
while (cnt==4){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs)){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(new_inputs,target,l_rate){
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
k <- c(0,0,0,0)
while (cnt==4){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
print(k[i])
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs[i])){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
l_rate <- 0.05
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
k <- c(0,0,0,0)
while (cnt==4){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs[i])){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
weight
while (cnt==4){
for (i in 1:nrow(new_inputs)){
if (target[i]-new_inputs[i,]%*%weight != 0){
k[i] <- target[i]-new_inputs[i,]%*%weight
ste <- ifelse(k[i]>=0,1,0)
for (j in 1:ncol(new_inputs[i])){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
print(weight[j])
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
k[2]
k[2] <- target[2]-new_inputs[2,]%*%weight
k[2]
ste <- ifelse(k[2]>=0,1,0)
ste
weight[1] <- weight[1]+l_rate*new_inputs[1,1]*ste
weight[1]
weight[2] <- weight[2]+l_rate*new_inputs[1,2]*ste
weight[2]
k[3] <- target[3]-new_inputs[3,]%*%weight
k[3]
ste <- ifelse(k[3]>=0,1,0)
ste
weight[1] <- weight[1]+l_rate*new_inputs[1,1]*ste
weight[1]
weight[2] <- weight[2]+l_rate*new_inputs[1,2]*ste
weight[2]
l_rate <- 0.05
weight[2] <- weight[2]+l_rate*new_inputs[1,2]*ste
weight[2]
weight[1] <- weight[1]+l_rate*new_inputs[1,1]*ste
weight[1]
k[3] <- target[3]-new_inputs[3,]%*%weight
k[3]
ste <- ifelse(k[3]>=0,1,0)
ste
weight[1] <- weight[1]+l_rate*new_inputs[1,1]*ste
weight[1]
weight[2] <- weight[2]+l_rate*new_inputs[1,2]*ste
weight[2]
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
l_rate <- 0.05
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
k <- c(0,0,0,0)
k[3] <- target[3]-new_inputs[3,]%*%weight
k[3]
ste <- ifelse(k[3]>=0,1,0)
ste
weight[1] <- weight[1]+l_rate*new_inputs[1,1]*ste
weight[1]
weight[2] <- weight[1]+l_rate*new_inputs[1,2]*ste
weight[2]
weight[3] <- weight[1]+l_rate*new_inputs[1,3]*ste
weight[3]
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
weight[1] <- weight[1]+l_rate*new_inputs[1,1]*ste
weight[1]
weight[2] <- weight[2]+l_rate*new_inputs[1,2]*ste
weight[2]
weight[3] <- weight[3]+l_rate*new_inputs[1,3]*ste
weight[3]
error <- 0
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
l_rate <- 0.05
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
cnt <- 0
error <- 0
while (cnt==4){
for (i in 1:nrow(new_inputs)){
error <- target[i]-new_inputs[i,]%*%weight
if (target[i]-new_inputs[i,]%*%weight != 0){
ste <- ifelse(error>=0,1,0)
for (j in 1:ncol(new_inputs[i])){
weight[j] <- weight[i]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
weight
while (cnt==4){
for (i in 1:nrow(new_inputs)){
error <- target[i]-new_inputs[i,]%*%weight
if (target[i]-new_inputs[i,]%*%weight != 0){
ste <- ifelse(error>=0,1,0)
for (j in 1:ncol(new_inputs[i])){
weight[j] <- weight[j]+l_rate*new_inputs[i,j]*ste
}
cnt <- 0
}else{
cnt <- cnt + 1
}
}
}
weight
new_inputs
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
weight
target[1]
target[4]
ncol(new_inputs[1])
ncol(new_inputs)
and_pcn <- function(data,target,r){
cnt <- 1
while(cnt!=4){
for (i in 1:nrow(data)){
error <- target[i]-data[i,]%*%weight
ste <- ifelse(error>0,1,0)
if (ste==1){
for (j in 1:ncol(data)){
weight[j] <- weight[j]+r*data[i,j]*ste
}
} else{
cnt <- cnt+1
}
}
}
}
inputs<-matrix(c(0,0,1,0,0,1,1,1),nrow=4,byrow=T)
target<-matrix(c(0,0,0,1),nrow=4)
new_inputs<-cbind(matrix(c(-1,-1,-1,-1),nrow=4),inputs)
new_inputs
l_rate <- 0.05
and_pcn(new_inputs,target,l_rate)
and_pcn <- function(data,target,r){
cnt <- 1
while(cnt!=4){
for (i in 1:nrow(data)){
error <- target[i]-data[i,]%*%weight
ste <- ifelse(error>0,1,0)
if (ste==1){
for (j in 1:ncol(data)){
weight[j] <- weight[j]+r*data[i,j]*ste
}
} else{
cnt <- cnt+1
}
}
}
print(weight)
}
and_pcn(new_inputs,target,l_rate)
weight <- matrix(c(0.4,0.3,0.1),nrow=3)
and_pcn(new_inputs,target,l_rate)
weight <- matrix(c(0.3,0.4,0.1),nrow=3)
and_pcn(new_inputs,target,l_rate)
